
AVR_Bootloader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000398  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00007398  0000042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800082  00800082  0000044e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000044e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000004c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014c5  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000961  00000000  00000000  00001a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1c  00000000  00000000  000023fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00002e1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000747  00000000  00000000  000030bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bcc  00000000  00000000  00003803  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000043cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 2a 38 	jmp	0x7054	; 0x7054 <__ctors_end>
    7004:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7008:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    700c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7010:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7014:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7018:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    701c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7020:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7024:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7028:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    702c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7030:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7034:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7038:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    703c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7040:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7044:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7048:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    704c:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>
    7050:	0c 94 47 38 	jmp	0x708e	; 0x708e <__bad_interrupt>

00007054 <__ctors_end>:
    7054:	11 24       	eor	r1, r1
    7056:	1f be       	out	0x3f, r1	; 63
    7058:	cf e5       	ldi	r28, 0x5F	; 95
    705a:	d8 e0       	ldi	r29, 0x08	; 8
    705c:	de bf       	out	0x3e, r29	; 62
    705e:	cd bf       	out	0x3d, r28	; 61

00007060 <__do_copy_data>:
    7060:	10 e0       	ldi	r17, 0x00	; 0
    7062:	a0 e6       	ldi	r26, 0x60	; 96
    7064:	b0 e0       	ldi	r27, 0x00	; 0
    7066:	e8 e9       	ldi	r30, 0x98	; 152
    7068:	f3 e7       	ldi	r31, 0x73	; 115
    706a:	02 c0       	rjmp	.+4      	; 0x7070 <__do_copy_data+0x10>
    706c:	05 90       	lpm	r0, Z+
    706e:	0d 92       	st	X+, r0
    7070:	a2 38       	cpi	r26, 0x82	; 130
    7072:	b1 07       	cpc	r27, r17
    7074:	d9 f7       	brne	.-10     	; 0x706c <__do_copy_data+0xc>

00007076 <__do_clear_bss>:
    7076:	20 e0       	ldi	r18, 0x00	; 0
    7078:	a2 e8       	ldi	r26, 0x82	; 130
    707a:	b0 e0       	ldi	r27, 0x00	; 0
    707c:	01 c0       	rjmp	.+2      	; 0x7080 <.do_clear_bss_start>

0000707e <.do_clear_bss_loop>:
    707e:	1d 92       	st	X+, r1

00007080 <.do_clear_bss_start>:
    7080:	a5 38       	cpi	r26, 0x85	; 133
    7082:	b2 07       	cpc	r27, r18
    7084:	e1 f7       	brne	.-8      	; 0x707e <.do_clear_bss_loop>
    7086:	0e 94 23 39 	call	0x7246	; 0x7246 <main>
    708a:	0c 94 ca 39 	jmp	0x7394	; 0x7394 <_exit>

0000708e <__bad_interrupt>:
    708e:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

00007092 <HAL_GPIO_INIT_PIN>:
	}
	else
	{
		return GPIO_PIN_RESET ;
	}
}
    7092:	dc 01       	movw	r26, r24
    7094:	fb 01       	movw	r30, r22
    7096:	81 81       	ldd	r24, Z+1	; 0x01
    7098:	81 30       	cpi	r24, 0x01	; 1
    709a:	99 f4       	brne	.+38     	; 0x70c2 <HAL_GPIO_INIT_PIN+0x30>
    709c:	80 81       	ld	r24, Z
    709e:	11 96       	adiw	r26, 0x01	; 1
    70a0:	9c 91       	ld	r25, X
    70a2:	11 97       	sbiw	r26, 0x01	; 1
    70a4:	89 2b       	or	r24, r25
    70a6:	11 96       	adiw	r26, 0x01	; 1
    70a8:	8c 93       	st	X, r24
    70aa:	11 97       	sbiw	r26, 0x01	; 1
    70ac:	82 81       	ldd	r24, Z+2	; 0x02
    70ae:	81 30       	cpi	r24, 0x01	; 1
    70b0:	81 f4       	brne	.+32     	; 0x70d2 <HAL_GPIO_INIT_PIN+0x40>
    70b2:	80 81       	ld	r24, Z
    70b4:	12 96       	adiw	r26, 0x02	; 2
    70b6:	9c 91       	ld	r25, X
    70b8:	12 97       	sbiw	r26, 0x02	; 2
    70ba:	89 2b       	or	r24, r25
    70bc:	12 96       	adiw	r26, 0x02	; 2
    70be:	8c 93       	st	X, r24
    70c0:	08 95       	ret
    70c2:	90 81       	ld	r25, Z
    70c4:	90 95       	com	r25
    70c6:	11 96       	adiw	r26, 0x01	; 1
    70c8:	8c 91       	ld	r24, X
    70ca:	11 97       	sbiw	r26, 0x01	; 1
    70cc:	98 23       	and	r25, r24
    70ce:	11 96       	adiw	r26, 0x01	; 1
    70d0:	9c 93       	st	X, r25
    70d2:	08 95       	ret

000070d4 <HAL_GPIO_WRITEPIN>:


void HAL_GPIO_WRITEPIN(GPIO_TypeDef * PORT,uint8_t PIN_NUM,GPIO_PinState PIN_STATE)
{
	if(PIN_STATE != GPIO_PIN_RESET)
    70d4:	44 23       	and	r20, r20
    70d6:	29 f0       	breq	.+10     	; 0x70e2 <HAL_GPIO_WRITEPIN+0xe>
	{
		PORT->PORT_REG |= PIN_NUM ;
    70d8:	fc 01       	movw	r30, r24
    70da:	22 81       	ldd	r18, Z+2	; 0x02
    70dc:	62 2b       	or	r22, r18
    70de:	62 83       	std	Z+2, r22	; 0x02
    70e0:	08 95       	ret
	}
	else
	{
		PORT->PORT_REG &= ~(PIN_NUM);
    70e2:	60 95       	com	r22
    70e4:	fc 01       	movw	r30, r24
    70e6:	22 81       	ldd	r18, Z+2	; 0x02
    70e8:	62 23       	and	r22, r18
    70ea:	62 83       	std	Z+2, r22	; 0x02
    70ec:	08 95       	ret

000070ee <HAL_GPIO_WRITEPORT>:
	
}


void HAL_GPIO_WRITEPORT(GPIO_TypeDef * PORT,uint8_t PINS,GPIO_PinState PINS_STATE)
{
    70ee:	fc 01       	movw	r30, r24
	PORT->PORT_REG &=~(PINS);
    70f0:	60 95       	com	r22
    70f2:	92 81       	ldd	r25, Z+2	; 0x02
    70f4:	69 23       	and	r22, r25
	PORT->PORT_REG |=(PINS_STATE);
    70f6:	46 2b       	or	r20, r22
    70f8:	42 83       	std	Z+2, r20	; 0x02
    70fa:	08 95       	ret

000070fc <LCD_Triger_Enable>:
	LCD_Goto_Location(y,x);
	HAL_GPIO_WRITEPIN(GPIOB,LCD_RS_GPIOB,GPIO_PIN_SET);
	HAL_GPIO_WRITEPIN(GPIOB,LCD_RW_GPIOB,GPIO_PIN_RESET);
	LCD_Send_4BitData(ch);
	
}
    70fc:	41 e0       	ldi	r20, 0x01	; 1
    70fe:	68 e0       	ldi	r22, 0x08	; 8
    7100:	86 e3       	ldi	r24, 0x36	; 54
    7102:	90 e0       	ldi	r25, 0x00	; 0
    7104:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <HAL_GPIO_WRITEPIN>
    7108:	85 e0       	ldi	r24, 0x05	; 5
    710a:	8a 95       	dec	r24
    710c:	f1 f7       	brne	.-4      	; 0x710a <LCD_Triger_Enable+0xe>
    710e:	00 00       	nop
    7110:	40 e0       	ldi	r20, 0x00	; 0
    7112:	68 e0       	ldi	r22, 0x08	; 8
    7114:	86 e3       	ldi	r24, 0x36	; 54
    7116:	90 e0       	ldi	r25, 0x00	; 0
    7118:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <HAL_GPIO_WRITEPIN>
    711c:	8f e3       	ldi	r24, 0x3F	; 63
    711e:	9f e1       	ldi	r25, 0x1F	; 31
    7120:	01 97       	sbiw	r24, 0x01	; 1
    7122:	f1 f7       	brne	.-4      	; 0x7120 <LCD_Triger_Enable+0x24>
    7124:	00 c0       	rjmp	.+0      	; 0x7126 <LCD_Triger_Enable+0x2a>
    7126:	00 00       	nop
    7128:	08 95       	ret

0000712a <LCD_Send_4BitData>:
    712a:	cf 93       	push	r28
    712c:	c8 2f       	mov	r28, r24
    712e:	48 2f       	mov	r20, r24
    7130:	40 7f       	andi	r20, 0xF0	; 240
    7132:	60 ef       	ldi	r22, 0xF0	; 240
    7134:	89 e3       	ldi	r24, 0x39	; 57
    7136:	90 e0       	ldi	r25, 0x00	; 0
    7138:	0e 94 77 38 	call	0x70ee	; 0x70ee <HAL_GPIO_WRITEPORT>
    713c:	0e 94 7e 38 	call	0x70fc	; 0x70fc <LCD_Triger_Enable>
    7140:	80 e1       	ldi	r24, 0x10	; 16
    7142:	c8 9f       	mul	r28, r24
    7144:	a0 01       	movw	r20, r0
    7146:	11 24       	eor	r1, r1
    7148:	60 ef       	ldi	r22, 0xF0	; 240
    714a:	89 e3       	ldi	r24, 0x39	; 57
    714c:	90 e0       	ldi	r25, 0x00	; 0
    714e:	0e 94 77 38 	call	0x70ee	; 0x70ee <HAL_GPIO_WRITEPORT>
    7152:	0e 94 7e 38 	call	0x70fc	; 0x70fc <LCD_Triger_Enable>
    7156:	cf 91       	pop	r28
    7158:	08 95       	ret

0000715a <LCD_Send_A_Character_With_CurrLoc>:
    715a:	cf 93       	push	r28
    715c:	c8 2f       	mov	r28, r24
    715e:	41 e0       	ldi	r20, 0x01	; 1
    7160:	62 e0       	ldi	r22, 0x02	; 2
    7162:	86 e3       	ldi	r24, 0x36	; 54
    7164:	90 e0       	ldi	r25, 0x00	; 0
    7166:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <HAL_GPIO_WRITEPIN>
    716a:	40 e0       	ldi	r20, 0x00	; 0
    716c:	64 e0       	ldi	r22, 0x04	; 4
    716e:	86 e3       	ldi	r24, 0x36	; 54
    7170:	90 e0       	ldi	r25, 0x00	; 0
    7172:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <HAL_GPIO_WRITEPIN>
    7176:	8c 2f       	mov	r24, r28
    7178:	0e 94 95 38 	call	0x712a	; 0x712a <LCD_Send_4BitData>
    717c:	cf 91       	pop	r28
    717e:	08 95       	ret

00007180 <LCD_Send_A_Command>:
    7180:	cf 93       	push	r28
    7182:	c8 2f       	mov	r28, r24
    7184:	40 e0       	ldi	r20, 0x00	; 0
    7186:	66 e0       	ldi	r22, 0x06	; 6
    7188:	86 e3       	ldi	r24, 0x36	; 54
    718a:	90 e0       	ldi	r25, 0x00	; 0
    718c:	0e 94 6a 38 	call	0x70d4	; 0x70d4 <HAL_GPIO_WRITEPIN>
    7190:	8c 2f       	mov	r24, r28
    7192:	0e 94 95 38 	call	0x712a	; 0x712a <LCD_Send_4BitData>
    7196:	cf 91       	pop	r28
    7198:	08 95       	ret

0000719a <LCD_Send_A_String_With_CurrLoc>:
    719a:	cf 93       	push	r28
    719c:	df 93       	push	r29
    719e:	ec 01       	movw	r28, r24
    71a0:	03 c0       	rjmp	.+6      	; 0x71a8 <LCD_Send_A_String_With_CurrLoc+0xe>
    71a2:	21 96       	adiw	r28, 0x01	; 1
    71a4:	0e 94 ad 38 	call	0x715a	; 0x715a <LCD_Send_A_Character_With_CurrLoc>
    71a8:	88 81       	ld	r24, Y
    71aa:	81 11       	cpse	r24, r1
    71ac:	fa cf       	rjmp	.-12     	; 0x71a2 <LCD_Send_A_String_With_CurrLoc+0x8>
    71ae:	df 91       	pop	r29
    71b0:	cf 91       	pop	r28
    71b2:	08 95       	ret

000071b4 <LCD_Goto_Location>:
    71b4:	e8 2f       	mov	r30, r24
    71b6:	f0 e0       	ldi	r31, 0x00	; 0
    71b8:	e1 5a       	subi	r30, 0xA1	; 161
    71ba:	ff 4f       	sbci	r31, 0xFF	; 255
    71bc:	80 81       	ld	r24, Z
    71be:	86 0f       	add	r24, r22
    71c0:	81 50       	subi	r24, 0x01	; 1
    71c2:	0e 94 c0 38 	call	0x7180	; 0x7180 <LCD_Send_A_Command>
    71c6:	08 95       	ret

000071c8 <LCD_Initializaion>:
	LCD_Send_A_Command(column_position[y-1]+(x-1));
}


void LCD_Initializaion(void)
{
    71c8:	cf 93       	push	r28
    71ca:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    71cc:	2f ef       	ldi	r18, 0xFF	; 255
    71ce:	89 ef       	ldi	r24, 0xF9	; 249
    71d0:	90 e0       	ldi	r25, 0x00	; 0
    71d2:	21 50       	subi	r18, 0x01	; 1
    71d4:	80 40       	sbci	r24, 0x00	; 0
    71d6:	90 40       	sbci	r25, 0x00	; 0
    71d8:	e1 f7       	brne	.-8      	; 0x71d2 <LCD_Initializaion+0xa>
    71da:	00 c0       	rjmp	.+0      	; 0x71dc <LCD_Initializaion+0x14>
    71dc:	00 00       	nop
	_delay_ms(20);
	// initialize portB pin 1,2,3 as output
	LCD_GPIO_Handler.mode = GPIO_MODE_OUTPUT ;
    71de:	c2 e8       	ldi	r28, 0x82	; 130
    71e0:	d0 e0       	ldi	r29, 0x00	; 0
    71e2:	81 e0       	ldi	r24, 0x01	; 1
    71e4:	89 83       	std	Y+1, r24	; 0x01
	LCD_GPIO_Handler.pinS = LCD_RW_GPIOB |LCD_RS_GPIOB |LCD_EN_GPIOB ;
    71e6:	8e e0       	ldi	r24, 0x0E	; 14
    71e8:	88 83       	st	Y, r24
	LCD_GPIO_Handler.pull =GPIO_NOPULL ;
    71ea:	1a 82       	std	Y+2, r1	; 0x02
	HAL_GPIO_INIT_PIN(GPIOB,&LCD_GPIO_Handler);
    71ec:	be 01       	movw	r22, r28
    71ee:	86 e3       	ldi	r24, 0x36	; 54
    71f0:	90 e0       	ldi	r25, 0x00	; 0
    71f2:	0e 94 49 38 	call	0x7092	; 0x7092 <HAL_GPIO_INIT_PIN>
	
	// initialize portA pin 4,5,6,7 as output	
	LCD_GPIO_Handler.pinS = LCD_D4_GPIOA|LCD_D5_GPIOA|LCD_D6_GPIOA|LCD_D7_GPIOA;
    71f6:	80 ef       	ldi	r24, 0xF0	; 240
    71f8:	88 83       	st	Y, r24
	HAL_GPIO_INIT_PIN(GPIOA,&LCD_GPIO_Handler);
    71fa:	be 01       	movw	r22, r28
    71fc:	89 e3       	ldi	r24, 0x39	; 57
    71fe:	90 e0       	ldi	r25, 0x00	; 0
    7200:	0e 94 49 38 	call	0x7092	; 0x7092 <HAL_GPIO_INIT_PIN>

	LCD_Send_A_Command(0x33U); // LCD initialization command 
    7204:	83 e3       	ldi	r24, 0x33	; 51
    7206:	0e 94 c0 38 	call	0x7180	; 0x7180 <LCD_Send_A_Command>
	LCD_Send_A_Command(0x32U);
    720a:	82 e3       	ldi	r24, 0x32	; 50
    720c:	0e 94 c0 38 	call	0x7180	; 0x7180 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_2LINE_4_BIT_MODE);
    7210:	88 e2       	ldi	r24, 0x28	; 40
    7212:	0e 94 c0 38 	call	0x7180	; 0x7180 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_COMMANED_CLEAR_CURSOR_OFF);
    7216:	8c e0       	ldi	r24, 0x0C	; 12
    7218:	0e 94 c0 38 	call	0x7180	; 0x7180 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_COMMANED_CLEAR_LCD);
    721c:	81 e0       	ldi	r24, 0x01	; 1
    721e:	0e 94 c0 38 	call	0x7180	; 0x7180 <LCD_Send_A_Command>
	
}
    7222:	df 91       	pop	r29
    7224:	cf 91       	pop	r28
    7226:	08 95       	ret

00007228 <LCD_Send_A_String_WithLoc>:

void LCD_Send_A_String_WithLoc(uint8_t y, uint8_t x, uint8_t *StringOfCharacters)
{
    7228:	cf 93       	push	r28
    722a:	df 93       	push	r29
    722c:	ea 01       	movw	r28, r20
	LCD_Goto_Location(y,x);
    722e:	0e 94 da 38 	call	0x71b4	; 0x71b4 <LCD_Goto_Location>
	while (*StringOfCharacters != 0)
    7232:	03 c0       	rjmp	.+6      	; 0x723a <LCD_Send_A_String_WithLoc+0x12>
	{
		LCD_Send_A_Character_With_CurrLoc(*StringOfCharacters++);
    7234:	21 96       	adiw	r28, 0x01	; 1
    7236:	0e 94 ad 38 	call	0x715a	; 0x715a <LCD_Send_A_Character_With_CurrLoc>
}

void LCD_Send_A_String_WithLoc(uint8_t y, uint8_t x, uint8_t *StringOfCharacters)
{
	LCD_Goto_Location(y,x);
	while (*StringOfCharacters != 0)
    723a:	88 81       	ld	r24, Y
    723c:	81 11       	cpse	r24, r1
    723e:	fa cf       	rjmp	.-12     	; 0x7234 <LCD_Send_A_String_WithLoc+0xc>
	{
		LCD_Send_A_Character_With_CurrLoc(*StringOfCharacters++);
	}
}
    7240:	df 91       	pop	r29
    7242:	cf 91       	pop	r28
    7244:	08 95       	ret

00007246 <main>:
#include <inttypes.h>
#include <avr/interrupt.h>


int main(void)
{
    7246:	cf 93       	push	r28
    7248:	df 93       	push	r29
    724a:	cd b7       	in	r28, 0x3d	; 61
    724c:	de b7       	in	r29, 0x3e	; 62
    724e:	d2 50       	subi	r29, 0x02	; 2
    7250:	0f b6       	in	r0, 0x3f	; 63
    7252:	f8 94       	cli
    7254:	de bf       	out	0x3e, r29	; 62
    7256:	0f be       	out	0x3f, r0	; 63
    7258:	cd bf       	out	0x3d, r28	; 61
	uint8_t App [ 512 ]; /* start with app size 4 pages */
	uint8_t sreg;
	uint32_t page_Num = 0; /* here we have 4 pages form 0 -3 */
	uint16_t Avr_Word =0;
	unsigned char *buf = App;
					if (pgm_read_byte((void *)0) != 0xff) /* check if flash not progarmmed yet */
    725a:	e0 e0       	ldi	r30, 0x00	; 0
    725c:	f0 e0       	ldi	r31, 0x00	; 0
    725e:	e4 91       	lpm	r30, Z
    7260:	ef 3f       	cpi	r30, 0xFF	; 255
    7262:	a1 f0       	breq	.+40     	; 0x728c <main+0x46>
					{
						asm ( "jmp 0x0000" );
    7264:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    7268:	00 e0       	ldi	r16, 0x00	; 0
    726a:	10 e0       	ldi	r17, 0x00	; 0
    726c:	11 c0       	rjmp	.+34     	; 0x7290 <main+0x4a>
					}
	
	for (int iterator = 0; iterator < 512 ; iterator ++ ) /* read 512 bytes from EEPROM */
	{

		App[ iterator ] = eeprom_read_byte ((const uint8_t *) iterator);
    726e:	c8 01       	movw	r24, r16
    7270:	0e 94 c2 39 	call	0x7384	; 0x7384 <eeprom_read_byte>
    7274:	e1 e0       	ldi	r30, 0x01	; 1
    7276:	f0 e0       	ldi	r31, 0x00	; 0
    7278:	ec 0f       	add	r30, r28
    727a:	fd 1f       	adc	r31, r29
    727c:	e0 0f       	add	r30, r16
    727e:	f1 1f       	adc	r31, r17
    7280:	80 83       	st	Z, r24
		if((App[iterator] == 0xff)) /* here check if we reach to the end of application  */
    7282:	8f 3f       	cpi	r24, 0xFF	; 255
    7284:	49 f0       	breq	.+18     	; 0x7298 <main+0x52>
					if (pgm_read_byte((void *)0) != 0xff) /* check if flash not progarmmed yet */
					{
						asm ( "jmp 0x0000" );
					}
	
	for (int iterator = 0; iterator < 512 ; iterator ++ ) /* read 512 bytes from EEPROM */
    7286:	0f 5f       	subi	r16, 0xFF	; 255
    7288:	1f 4f       	sbci	r17, 0xFF	; 255
    728a:	02 c0       	rjmp	.+4      	; 0x7290 <main+0x4a>
    728c:	00 e0       	ldi	r16, 0x00	; 0
    728e:	10 e0       	ldi	r17, 0x00	; 0
    7290:	01 15       	cp	r16, r1
    7292:	22 e0       	ldi	r18, 0x02	; 2
    7294:	12 07       	cpc	r17, r18
    7296:	5c f3       	brlt	.-42     	; 0x726e <main+0x28>

		App[ iterator ] = eeprom_read_byte ((const uint8_t *) iterator);
		if((App[iterator] == 0xff)) /* here check if we reach to the end of application  */
		break;
	}
	LCD_Initializaion();
    7298:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <LCD_Initializaion>
    /* Replace with your application code */
			LCD_Send_A_String_With_CurrLoc("Now Booting In ");
    729c:	82 e6       	ldi	r24, 0x62	; 98
    729e:	90 e0       	ldi	r25, 0x00	; 0
    72a0:	0e 94 cd 38 	call	0x719a	; 0x719a <LCD_Send_A_String_With_CurrLoc>
			LCD_Send_A_String_WithLoc(2,1,"    progress   ");
    72a4:	42 e7       	ldi	r20, 0x72	; 114
    72a6:	50 e0       	ldi	r21, 0x00	; 0
    72a8:	61 e0       	ldi	r22, 0x01	; 1
    72aa:	82 e0       	ldi	r24, 0x02	; 2
    72ac:	0e 94 14 39 	call	0x7228	; 0x7228 <LCD_Send_A_String_WithLoc>
    72b0:	8f ef       	ldi	r24, 0xFF	; 255
    72b2:	9b e7       	ldi	r25, 0x7B	; 123
    72b4:	e2 e9       	ldi	r30, 0x92	; 146
    72b6:	81 50       	subi	r24, 0x01	; 1
    72b8:	90 40       	sbci	r25, 0x00	; 0
    72ba:	e0 40       	sbci	r30, 0x00	; 0
    72bc:	e1 f7       	brne	.-8      	; 0x72b6 <main+0x70>
    72be:	00 c0       	rjmp	.+0      	; 0x72c0 <main+0x7a>
    72c0:	00 00       	nop
			_delay_ms(3000);
			LCD_Send_A_Command(0x01);
    72c2:	81 e0       	ldi	r24, 0x01	; 1
    72c4:	0e 94 c0 38 	call	0x7180	; 0x7180 <LCD_Send_A_Command>
{
	uint8_t App [ 512 ]; /* start with app size 4 pages */
	uint8_t sreg;
	uint32_t page_Num = 0; /* here we have 4 pages form 0 -3 */
	uint16_t Avr_Word =0;
	unsigned char *buf = App;
    72c8:	de 01       	movw	r26, r28
    72ca:	11 96       	adiw	r26, 0x01	; 1
			LCD_Send_A_Command(0x01);

    while (1) 
    {
			/* Disable interrupts before start nay operation on the flash as explaned in the data sheet */ 
			sreg = SREG;
    72cc:	0f b7       	in	r16, 0x3f	; 63
			cli();
    72ce:	f8 94       	cli
		for ( page_Num =0;page_Num <4 ;page_Num++)	 /* iterate on the for pages */
    72d0:	c1 2c       	mov	r12, r1
    72d2:	d1 2c       	mov	r13, r1
    72d4:	76 01       	movw	r14, r12
    72d6:	4b c0       	rjmp	.+150    	; 0x736e <main+0x128>
		{

			eeprom_busy_wait ();
    72d8:	e1 99       	sbic	0x1c, 1	; 28
    72da:	fe cf       	rjmp	.-4      	; 0x72d8 <main+0x92>
			boot_page_erase_safe (page_Num*SPM_PAGESIZE);    
    72dc:	07 b6       	in	r0, 0x37	; 55
    72de:	00 fc       	sbrc	r0, 0
    72e0:	fd cf       	rjmp	.-6      	; 0x72dc <main+0x96>
    72e2:	e1 99       	sbic	0x1c, 1	; 28
    72e4:	fe cf       	rjmp	.-4      	; 0x72e2 <main+0x9c>
    72e6:	b6 01       	movw	r22, r12
    72e8:	76 95       	lsr	r23
    72ea:	76 2f       	mov	r23, r22
    72ec:	66 27       	eor	r22, r22
    72ee:	77 95       	ror	r23
    72f0:	67 95       	ror	r22
    72f2:	83 e0       	ldi	r24, 0x03	; 3
    72f4:	fb 01       	movw	r30, r22
    72f6:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    72fa:	e8 95       	spm
			boot_spm_busy_wait ();      /* Wait until the memory is erased */
    72fc:	07 b6       	in	r0, 0x37	; 55
    72fe:	00 fc       	sbrc	r0, 0
    7300:	fd cf       	rjmp	.-6      	; 0x72fc <main+0xb6>
    7302:	20 e0       	ldi	r18, 0x00	; 0
    7304:	30 e0       	ldi	r19, 0x00	; 0
    7306:	19 c0       	rjmp	.+50     	; 0x733a <main+0xf4>

			for (int iterator=0; iterator<SPM_PAGESIZE; iterator+=2) /* fill the temp buffer */
			{
				Avr_Word = *buf++;
    7308:	1c 91       	ld	r17, X
				Avr_Word += (*buf++) << 8;
    730a:	ad 01       	movw	r20, r26
    730c:	4e 5f       	subi	r20, 0xFE	; 254
    730e:	5f 4f       	sbci	r21, 0xFF	; 255
    7310:	11 96       	adiw	r26, 0x01	; 1
    7312:	8c 91       	ld	r24, X
    7314:	90 e0       	ldi	r25, 0x00	; 0
    7316:	98 2f       	mov	r25, r24
    7318:	88 27       	eor	r24, r24
    731a:	81 0f       	add	r24, r17
    731c:	91 1d       	adc	r25, r1
				
				boot_page_fill_safe (iterator, Avr_Word); /* write to the temp flash buffer */
    731e:	07 b6       	in	r0, 0x37	; 55
    7320:	00 fc       	sbrc	r0, 0
    7322:	fd cf       	rjmp	.-6      	; 0x731e <main+0xd8>
    7324:	e1 99       	sbic	0x1c, 1	; 28
    7326:	fe cf       	rjmp	.-4      	; 0x7324 <main+0xde>
    7328:	a1 e0       	ldi	r26, 0x01	; 1
    732a:	0c 01       	movw	r0, r24
    732c:	a0 93 57 00 	sts	0x0057, r26	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    7330:	e8 95       	spm
    7332:	11 24       	eor	r1, r1

			eeprom_busy_wait ();
			boot_page_erase_safe (page_Num*SPM_PAGESIZE);    
			boot_spm_busy_wait ();      /* Wait until the memory is erased */

			for (int iterator=0; iterator<SPM_PAGESIZE; iterator+=2) /* fill the temp buffer */
    7334:	2e 5f       	subi	r18, 0xFE	; 254
    7336:	3f 4f       	sbci	r19, 0xFF	; 255
			{
				Avr_Word = *buf++;
				Avr_Word += (*buf++) << 8;
    7338:	da 01       	movw	r26, r20

			eeprom_busy_wait ();
			boot_page_erase_safe (page_Num*SPM_PAGESIZE);    
			boot_spm_busy_wait ();      /* Wait until the memory is erased */

			for (int iterator=0; iterator<SPM_PAGESIZE; iterator+=2) /* fill the temp buffer */
    733a:	f9 01       	movw	r30, r18
    733c:	20 38       	cpi	r18, 0x80	; 128
    733e:	31 05       	cpc	r19, r1
    7340:	18 f3       	brcs	.-58     	; 0x7308 <main+0xc2>
				Avr_Word = *buf++;
				Avr_Word += (*buf++) << 8;
				
				boot_page_fill_safe (iterator, Avr_Word); /* write to the temp flash buffer */
			}
			boot_page_write_safe (page_Num*SPM_PAGESIZE);     /* Store temp flash buffer in flash page */
    7342:	07 b6       	in	r0, 0x37	; 55
    7344:	00 fc       	sbrc	r0, 0
    7346:	fd cf       	rjmp	.-6      	; 0x7342 <main+0xfc>
    7348:	e1 99       	sbic	0x1c, 1	; 28
    734a:	fe cf       	rjmp	.-4      	; 0x7348 <main+0x102>
    734c:	85 e0       	ldi	r24, 0x05	; 5
    734e:	fb 01       	movw	r30, r22
    7350:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    7354:	e8 95       	spm
			boot_spm_busy_wait();							 /* Wait until write operation is ended */
    7356:	07 b6       	in	r0, 0x37	; 55
    7358:	00 fc       	sbrc	r0, 0
    735a:	fd cf       	rjmp	.-6      	; 0x7356 <main+0x110>
			boot_rww_enable ();
    735c:	81 e1       	ldi	r24, 0x11	; 17
    735e:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
    7362:	e8 95       	spm
    while (1) 
    {
			/* Disable interrupts before start nay operation on the flash as explaned in the data sheet */ 
			sreg = SREG;
			cli();
		for ( page_Num =0;page_Num <4 ;page_Num++)	 /* iterate on the for pages */
    7364:	ff ef       	ldi	r31, 0xFF	; 255
    7366:	cf 1a       	sub	r12, r31
    7368:	df 0a       	sbc	r13, r31
    736a:	ef 0a       	sbc	r14, r31
    736c:	ff 0a       	sbc	r15, r31
    736e:	24 e0       	ldi	r18, 0x04	; 4
    7370:	c2 16       	cp	r12, r18
    7372:	d1 04       	cpc	r13, r1
    7374:	e1 04       	cpc	r14, r1
    7376:	f1 04       	cpc	r15, r1
    7378:	08 f4       	brcc	.+2      	; 0x737c <main+0x136>
    737a:	ae cf       	rjmp	.-164    	; 0x72d8 <main+0x92>
			boot_rww_enable ();


		}
				
			SREG = sreg;
    737c:	0f bf       	out	0x3f, r16	; 63
			asm ( "jmp 0x0000" );
    737e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
	}
    7382:	a4 cf       	rjmp	.-184    	; 0x72cc <main+0x86>

00007384 <eeprom_read_byte>:
    7384:	e1 99       	sbic	0x1c, 1	; 28
    7386:	fe cf       	rjmp	.-4      	; 0x7384 <eeprom_read_byte>
    7388:	9f bb       	out	0x1f, r25	; 31
    738a:	8e bb       	out	0x1e, r24	; 30
    738c:	e0 9a       	sbi	0x1c, 0	; 28
    738e:	99 27       	eor	r25, r25
    7390:	8d b3       	in	r24, 0x1d	; 29
    7392:	08 95       	ret

00007394 <_exit>:
    7394:	f8 94       	cli

00007396 <__stop_program>:
    7396:	ff cf       	rjmp	.-2      	; 0x7396 <__stop_program>
